from aiogram import F, Router
from aiogram.types import Message, CallbackQuery
from aiogram.filters import CommandStart, Command
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
import requests
from aiogram.types import InputMediaPhoto, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.utils.keyboard import InlineKeyboardBuilder
import os
from dotenv import load_dotenv
import app.database.requests as rq

router = Router()
load_dotenv()

opensea_token = os.getenv('OPENSEA_API_KEY')

class NFTAccount(StatesGroup):
    account = State()
    blockchain = State()


class LotCreation(StatesGroup):
    choose_nft_for_lot = State()  
    set_starting_price = State()  


class BidCreation(StatesGroup):
    lot_number = State()  
    bid_amount = State() 

class NFT(StatesGroup):
    address = State()
    chain = State()
    identifier = State()

@router.message(CommandStart())
async def cmd_start(message: Message):
    await rq.set_user(message.from_user.id)
    await message.answer('–ü—Ä–∏–≤–µ—Ç!\n–Ø –±–æ—Ç-–∞—É–∫—Ü–∏–æ–Ω–µ—Ä. –° –ø–æ–º–æ—â—å—é –º–µ–Ω—è —Ç—ã –º–æ–∂–µ—à—å –Ω–∞–π—Ç–∏ –ª—É—á—à–µ–≥–æ –ø–æ–∫—É–ø–∞—Ç–µ–ª—è –¥–ª—è —Å–≤–æ–∏—Ö NFT –∏–ª–∏ –∂–µ –ø–æ—É—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å –≤ —Ç–æ—Ä–≥–∞—Ö.\n–î–ª—è –ø—Ä–æ–¥–∞–≤—Ü–æ–≤:\n1. /sync_nfts - –ó–∞–≥—Ä—É–∑–∫–∞ —Ç–≤–æ–∏—Ö NFT —Å nft –º–∞—Ä–∫–µ—Ç–∞ OpenSea.üîÑ\n2. /list_nfts_for_lot - –ü—Ä–æ—Å–º–æ—Ç—Ä —Ç–≤–æ–µ–π –∫–æ–ª–ª–µ–∫—Ü–∏–∏ NFT. –ó–¥–µ—Å—å –∂–µ —Ç—ã –º–æ–∂–µ—à—å –≤—ã—Å—Ç–∞–≤–∏—Ç—å –ª–æ—Ç. üèûÔ∏è \n3. /list_my_lots - –ü—Ä–æ—Å–º–æ—Ç—Ä –ª–æ—Ç–æ–≤ –≤—ã—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã—Ö –º–Ω–æ—é. üìù \n\n–î–ª—è –ø–æ–∫—É–ø–∞—Ç–µ–ª–µ–π:\n1. /list_open_lots - –ø—Ä–æ—Å–º–æ—Ç—Ä –æ—Ç–∫—Ä—ã—Ç—ã—Ö –ª–æ—Ç–æ–≤.üëÄ\n2. /get_nft - –ø–æ–∏—Å–∫ nft –Ω–∞ nft –º–∞—Ä–∫–µ—Ç–µ')


@router.message(Command('sync_nfts'))
async def nft_synchronization(message: Message, state: FSMContext):
    await state.set_state(NFTAccount.account)
    await message.answer('–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π –ø—É–±–ª–∏—á–Ω—ã–π –±–ª–æ–∫—á–µ–π–Ω-–∞–¥—Ä–µ—Å.')


@router.message(NFTAccount.account)
async def register_account(message: Message, state: FSMContext):
    await state.update_data(account=message.text)
    await state.set_state(NFTAccount.blockchain)
    await message.answer('–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –±–ª–æ–∫—á–µ–π–Ω —Å–µ—Ç–∏.')

@router.message(NFTAccount.blockchain)
async def register_blockchain(message: Message, state: FSMContext):
    await state.update_data(blockchain=message.text)

    user_data = await state.get_data()
    blockchain = user_data.get('blockchain')
    account = user_data.get('account')

    url = f"https://api.opensea.io/api/v2/chain/{blockchain}/account/{account}/nfts"

    headers = {
        'x-api-key': opensea_token  
    }
    
    response = requests.get(url, headers=headers)
    if response.status_code == 200:
        data = response.json()
        nfts = data.get('nfts', [])
        for nft in nfts:
            image_url = nft.get('image_url')
            if image_url:
                await rq.set_nft(href=image_url, tg_id=message.from_user.id)
    else:
        await message.answer(f"–û—à–∏–±–∫–∞: {response.status_code} {response.reason}")
    
    await state.clear()


@router.message(Command('list_nfts_for_lot'))
async def list_nfts_for_lot(message: Message):
    tg_id = message.from_user.id
    nfts = await rq.get_user_nfts(tg_id)

    if not nfts:
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç NFT –¥–ª—è –≤—ã—Å—Ç–∞–≤–ª–µ–Ω–∏—è –Ω–∞ –ª–æ—Ç.")
        return

    for href in nfts:
        await message.answer_photo(href) 

    keyboard = InlineKeyboardBuilder()
    keyboard.button(text="–î–∞", callback_data="create_lot_yes")
    keyboard.button(text="–ù–µ—Ç", callback_data="create_lot_no")
    await message.answer("–•–æ—Ç–∏—Ç–µ –≤—ã—Å—Ç–∞–≤–∏—Ç—å –ª–æ—Ç?", reply_markup=keyboard.as_markup())


@router.callback_query(F.data == "create_lot_yes")
async def ask_nft_for_lot(call: CallbackQuery, state: FSMContext):
    await call.message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä NFT, –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ –≤—ã—Å—Ç–∞–≤–∏—Ç—å –Ω–∞ –ª–æ—Ç:")
    await state.set_state(LotCreation.choose_nft_for_lot)

@router.callback_query(F.data == "create_lot_no")
async def cancel_lot_creation(call: CallbackQuery):
    await call.message.answer("–õ–æ—Ç –Ω–µ –±—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω.")
    await call.answer() 


@router.message(LotCreation.choose_nft_for_lot)
async def ask_starting_price(message: Message, state: FSMContext):
    await state.update_data(choose_nft_for_lot=int(message.text))
    nft_number = int(message.text)
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ NFT
    user_data = await state.get_data()
    tg_id = message.from_user.id
    nfts = await rq.get_user_nfts(tg_id)

    if nft_number < 0 or nft_number >= len(nfts):
        await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä NFT. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        return

    selected_nft = nfts[nft_number]
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞—á–∞–ª—å–Ω—É—é —Ü–µ–Ω—É")
    await state.set_state(LotCreation.set_starting_price)

@router.message(LotCreation.set_starting_price)
async def create_lot(message: Message, state: FSMContext):
    lot_data = await state.get_data()
    nft_number = lot_data.get('choose_nft_for_lot')
    try:
        starting_price = int(message.text) 
    except ValueError:
        await message.answer("–ù–µ–≤–µ—Ä–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.")
        return

    user_data = await state.get_data()
    await rq.create_lot(nft_id=nft_number, user_id=message.from_user.id, starting_price=starting_price)

    await message.answer(f"–õ–æ—Ç —Å–æ–∑–¥–∞–Ω —Å –Ω–∞—á–∞–ª—å–Ω–æ–π —Å—Ç–æ–∏–º–æ—Å—Ç—å—é {starting_price}.")
    await state.clear()




@router.message(Command('list_my_lots'))
async def list_my_lots(message: Message):
    tg_id = message.from_user.id
    lots = await rq.get_user_lots(tg_id)

    if not lots:
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ª–æ—Ç–æ–≤.")
        return

    for lot in lots:
        await message.answer(f"–õ–æ—Ç ID: {lot.id}\n–ù–∞—á–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞: {lot.starting_price}\n–¢–µ–∫—É—â–∞—è —Å—Ç–∞–≤–∫–∞: {lot.current_bid or '–ù–µ—Ç'}\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {lot.highest_bidder_id or '–ù–µ—Ç'}")
        nft = await rq.get_nft(lot.nft_id)
        await message.answer_photo(nft.href)




@router.message(Command('list_open_lots'))
async def list_open_lots(message: Message):
    tg_id = message.from_user.id
    open_lots = await rq.get_open_lots(tg_id)

    if not open_lots:
        await message.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ª–æ—Ç–æ–≤.")
        return

    for lot in open_lots:
        await message.answer(f"–õ–æ—Ç ID: {lot.id}\n–ù–∞—á–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞: {lot.starting_price}\n–¢–µ–∫—É—â–∞—è —Å—Ç–∞–≤–∫–∞: {lot.current_bid or '–ù–µ—Ç'}")
        nft = await rq.get_nft(lot.nft_id)
        await message.answer_photo(nft.href)
        
    keyboard = InlineKeyboardBuilder()
    keyboard.button(text="–î–∞", callback_data="create_bid_yes")
    keyboard.button(text="–ù–µ—Ç", callback_data="create_bid_no")
    await message.answer("–•–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å —Å—Ç–∞–≤–∫—É –ª–æ—Ç?", reply_markup=keyboard.as_markup())


@router.callback_query(F.data == "create_bid_yes")
async def ask_nft_for_lot(call: CallbackQuery, state: FSMContext):
    await call.message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –æ—Ç–∫—Ä—ã—Ç–æ–≥–æ –ª–æ—Ç–∞:")
    await state.set_state(BidCreation.lot_number)

@router.callback_query(F.data == "create_bid_no")
async def cancel_lot_creation(call: CallbackQuery):
    await call.message.answer("–°—Ç–∞–≤–∫–∞ –Ω–µ –±—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω–∞.")
    await call.answer() 

@router.message(BidCreation.lot_number)
async def ask_starting_price(message: Message, state: FSMContext):
    await state.update_data(lot_number=int(message.text))
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —Å—Ç–∞–≤–∫—É")
    await state.set_state(BidCreation.bid_amount)

@router.message(BidCreation.bid_amount)
async def create_lot(message: Message, state: FSMContext):
    await state.update_data(bid_amount=int(message.text))
    lot_data = await state.get_data()
    

    await rq.place_bid(lot_id=lot_data.get('lot_number'), bidder_id=message.from_user.id, bid_amount=lot_data.get('bid_amount'))
    await message.answer("–í–∞—à–∞ —Å—Ç–∞–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞.")
    await state.clear()




@router.message(Command('get_nft'))
async def nft_synchronization(message: Message, state: FSMContext):
    await state.set_state(NFT.address)
    await message.answer('–í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å NFT.')


@router.message(NFT.address)
async def register_account(message: Message, state: FSMContext):
    await state.update_data(address=message.text)
    await state.set_state(NFT.chain)
    await message.answer('–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –±–ª–æ–∫—á–µ–π–Ω —Å–µ—Ç–∏.')


@router.message(NFT.chain)
async def register_account(message: Message, state: FSMContext):
    await state.update_data(chain=message.text)
    await state.set_state(NFT.identifier)
    await message.answer('–í–≤–µ–¥–∏—Ç–µ id NFT.')

@router.message(NFT.identifier)
async def register_blockchain(message: Message, state: FSMContext):
    await state.update_data(identifier=message.text)

    nft_data = await state.get_data()
    address = nft_data.get('address')
    chain = nft_data.get('chain')
    identifier = nft_data.get('identifier')

    url = f"https://api.opensea.io/api/v2/chain/{chain}/contract/{address}/nfts/{identifier}"

    headers = {
        'x-api-key': opensea_token  
    }
    
    response = requests.get(url, headers=headers)
    if response.status_code == 200:
        data = response.json()
        nft = data.get('nft', {})
        image_url = nft.get('image_url')
        await message.answer(image_url)
    else:
        await message.answer(f"–û—à–∏–±–∫–∞: {response.status_code} {response.reason}")
    
    await state.clear()